name: 'Docker Security Scan'
description: 'Install Syft/Grype and scan Docker images for vulnerabilities'
inputs:
  images:
    description: 'JSON array of Docker images to scan (e.g., ["image1:tag", "image2:tag"])'
    required: true
  continue-on-error:
    description: 'Whether to continue on scan errors'
    required: false
    default: 'true'
  fail-on-critical:
    description: 'Whether to fail the action if any Critical CVEs are found'
    required: false
    default: 'false'
  fail-on-high:
    description: 'Whether to fail the action if any High CVEs are found'
    required: false
    default: 'false'
  upload-logs:
    description: 'Whether to upload scan logs as artifacts'
    required: false
    default: 'true'
  log-artifact-name:
    description: 'Name for the uploaded log artifact'
    required: false
    default: 'logs'

runs:
  using: 'composite'
  steps:
    - name: Install Syft
      shell: bash
      run: |
        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

    - name: Install Grype
      shell: bash
      run: |
        curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin

    - name: Create logs directory
      shell: bash
      run: |
        mkdir -p ${RUNNER_WORKSPACE}/security-scan-logs

    - name: Scan Docker Images
      shell: bash
      continue-on-error: ${{ inputs.continue-on-error == 'true' }}
      run: |
        # Parse the JSON array of images
        images='${{ inputs.images }}'
        echo "Images to scan: $images"
        
        # Configuration
        fail_on_critical='${{ inputs.fail-on-critical }}'
        fail_on_high='${{ inputs.fail-on-high }}'
        
        echo "Configuration:"
        echo "  - Fail on Critical CVEs: $fail_on_critical"
        echo "  - Fail on High CVEs: $fail_on_high"
        
        # Function to scan a single image
        scan_image() {
          local image=$1
          echo "::group::Scanning image: $image"
          
          # Create log file name by replacing special characters
          log_file="${RUNNER_WORKSPACE}/security-scan-logs/CVE_Scan_$(echo $image | sed 's%[/,:]%_%g').log"
          
          echo "Scanning image $image"
          echo "Logging to $log_file"
          
          # Run grype scan
          if grype $image > "$log_file" 2>&1; then
            scan_result=0
          else
            scan_result=1
          fi
          
          # Print CVE counts
          local should_fail=0
          if [ -f "$log_file" ]; then
            cve_count=$(grep -E " Critical | High | Medium | Low | Negligible " "$log_file" | wc -l || echo "0")
            cve_summary="Found $cve_count CVEs for image $image: "
            
            for status in Critical High Medium Low Negligible; do
              if [[ $status != "Critical" ]]; then
                cve_summary+=", " 
              fi
              count=$(grep " $status " "$log_file" | wc -l || echo "0")
              cve_summary+="$count ${status}"
            done
            echo "$cve_summary"
            
            # Check for critical CVEs
            critical_count=$(grep " Critical " "$log_file" | wc -l || echo "0")
            if [ "$critical_count" -gt 0 ]; then
              echo "::warning::Found $critical_count Critical CVEs for image $image"
              echo "Critical CVEs found in $log_file:"
              grep -E "SEVERITY|Critical" "$log_file" || true
              echo ""
              
              if [ "$fail_on_critical" == "true" ]; then
                echo "::error::Action configured to fail on Critical CVEs"
                should_fail=1
              fi
            fi
            
            # Check for high CVEs
            high_count=$(grep " High " "$log_file" | wc -l || echo "0")
            if [ "$high_count" -gt 0 ]; then
              echo "::warning::Found $high_count High CVEs for image $image"
              
              if [ "$fail_on_high" == "true" ]; then
                echo "::error::Action configured to fail on High CVEs"
                echo "High CVEs found in $log_file:"
                grep -E "SEVERITY|High" "$log_file" || true
                echo ""
                should_fail=1
              fi
            fi
          fi
          
          echo "::endgroup::"
          
          # Return failure if we should fail or if the scan itself failed
          if [ $should_fail -eq 1 ] || [ $scan_result -ne 0 ]; then
            return 1
          fi
          
          return 0
        }
        
        # Parse JSON array and scan each image
        overall_exit_code=0
        echo "$images" | jq -r '.[]' | while read -r image; do
          if [ -n "$image" ]; then
            if ! scan_image "$image"; then
              overall_exit_code=1
            fi
          fi
        done
        
        # Handle the exit code properly in the subshell
        if [ $overall_exit_code -ne 0 ]; then
          echo "::error::One or more security scans failed or found vulnerabilities that exceed the configured thresholds"
          exit 1
        fi

    - name: Upload scan logs
      if: always() && inputs.upload-logs == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.log-artifact-name }}
        path: ${{ runner.workspace }}/security-scan-logs
        if-no-files-found: ignore
