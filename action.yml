name: 'Docker Security Scan'
description: 'Install Syft/Grype and scan Docker images for vulnerabilities'
inputs:
  images:
    description: 'JSON array of Docker images to scan (e.g., ["image1:tag", "image2:tag"])'
    required: true
  fail-on-critical:
    description: 'Whether to fail the action if any Critical CVEs are found'
    required: false
    default: 'false'
  fail-on-high:
    description: 'Whether to fail the action if any High CVEs are found'
    required: false
    default: 'false'
  upload-logs:
    description: 'Whether to upload scan logs as artifacts'
    required: false
    default: 'true'
  log-artifact-name:
    description: 'Name for the uploaded log artifact'
    required: false
    default: 'security-scan-logs'

outputs:
  scan-status:
    description: 'Status of the security scan: 0=success, 1=CVE threshold exceeded, 2=scan failure'
    value: ${{ steps.scan.outputs.exit-code }}

runs:
  using: 'composite'
  steps:
    - name: Install Syft
      shell: bash
      run: |
        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

    - name: Install Grype
      shell: bash
      run: |
        curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin

    - name: Create logs directory
      shell: bash
      run: |
        mkdir -p ${RUNNER_WORKSPACE}/security-scan-logs

    - name: Scan Docker Images
      id: scan
      shell: bash
      run: |
        # Parse the JSON array of images
        images='${{ inputs.images }}'
        echo "Images to scan: $images"
        
        # Configuration
        fail_on_critical='${{ inputs.fail-on-critical }}'
        fail_on_high='${{ inputs.fail-on-high }}'
        
        echo "Configuration:"
        echo "  - Fail on Critical CVEs: $fail_on_critical"
        echo "  - Fail on High CVEs: $fail_on_high"
        
        # Function to scan a single image
        scan_image() {
          local image=$1
          echo "::group::Scanning image: $image"
          
          # Create log file name by replacing special characters
          log_file="${RUNNER_WORKSPACE}/security-scan-logs/CVE_Scan_$(echo $image | sed 's%[/,:]%_%g').log"
          
          echo "Scanning image $image"
          echo "Logging to $log_file"
          
          # Run grype scan, return 2 if scan fails to run successfully
          if ! grype $image > "$log_file" 2>&1; then
            echo "ERROR: grype failed to scan image $image"
            echo "::endgroup::"
            return 2
          fi
          
          # Print CVE counts
          local cve_fail=0
          if [ -f "$log_file" ]; then
            cve_count=$(grep -cE " Critical | High | Medium | Low | Negligible " "$log_file" || true)
            cve_summary="Found $cve_count CVEs for image $image: "
            
            for status in Critical High Medium Low Negligible; do
              if [[ $status != "Critical" ]]; then
                cve_summary+=", " 
              fi
              count=$(grep -c " $status " "$log_file" || true)
              cve_summary+="$count ${status}"
            done
            echo "$cve_summary"
            
            # Check for critical CVEs
            critical_count=$(grep -c " Critical " "$log_file" || true)
            if [ "$critical_count" -gt 0 ]; then
              log_text="Found $critical_count Critical CVEs for image $image"
              if [ "$fail_on_critical" == "true" ]; then
                echo "::error::$log_text"
                echo "Action configured to fail on Critical CVEs"
                cve_fail=1
              else
                echo "::warning::$log_text"
              fi
              echo "Critical CVEs found in $log_file:"
              grep -E "SEVERITY|Critical" "$log_file" || true
              echo ""
            fi

            # Check for high CVEs
            high_count=$(grep -c " High " "$log_file" || true)
            if [ "$high_count" -gt 0 ]; then
              log_text="Found $high_count High CVEs for image $image"
              if [ "$fail_on_high" == "true" ]; then
                echo "::error::$log_text"
                echo "Action configured to fail on High CVEs"
                cve_fail=1
              else
                echo "::warning::$log_text"
              fi
              echo "High CVEs found in $log_file:"
              grep -E "SEVERITY|High" "$log_file" || true
              echo ""
            fi
          fi
          
          echo "::endgroup::"
          
          # Return appropriate exit code:
          # 0 = success
          # 1 = CVE threshold exceeded
          # 2 = scan failure
          return $cve_fail
        }

        # Parse JSON array and scan each image
        overall_exit_code=0
        scans_run=0
        readarray -t image_list < <(echo "$images" | jq -r '.[]')

        for image in "${image_list[@]}"; do
          if [ -n "$image" ]; then
            exit_code=0
            scan_image "$image" || exit_code=$?
            scans_run=1

            # Keep the highest exit code (2 > 1 > 0)
            if [ $exit_code -gt $overall_exit_code ]; then
              overall_exit_code=$exit_code
            fi
          fi
        done

        if [ $scans_run -eq 0 ]; then
          echo "ERROR: No scans were run"
          overall_exit_code=2
        fi

        # Set output for the step
        echo "exit-code=$overall_exit_code" >> $GITHUB_OUTPUT

        echo "Scan completed with exit code: $overall_exit_code"

        # output error if anything failed
        if [ $overall_exit_code -ne 0 ]; then
          echo "ERROR: One or more security scans failed or found vulnerabilities that exceed the configured thresholds"
        fi

        # Always exit with 0 here so we can upload logs and check status later
        exit 0


    - name: Upload scan logs
      if: always() && inputs.upload-logs == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.log-artifact-name }}
        path: ${{ runner.workspace }}/security-scan-logs
        if-no-files-found: ignore

    - name: Check scan results
      shell: bash
      run: |
        exit_code="${{ steps.scan.outputs.exit-code }}"
        echo "Security scan exit code: $exit_code"

        case $exit_code in
          0)
            echo "✅ Security scan completed successfully"
            ;;
          1)
            echo "::error::❌ Security scan found vulnerabilities that exceed the configured thresholds"
            exit 1
            ;;
          2)
            echo "::error::❌ Security scan failed to run properly"
            exit 1
            ;;
          *)
            echo "::error::❌ Security scan completed with unexpected exit code: $exit_code"
            exit 1
            ;;
        esac
